<!doctype html>
<html>
  <head>
    <meta charset="utf-8" />
    <meta http-equiv='X-UA-Compatible' content='IE=edge;chrome=1' />
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0">

    <title>Empty Brackets â€“ Advanced Android Animation in Scala</title>
    <link rel="alternate" type="application/atom+xml" title="Atom Feed" href="/feed.xml" />
    <link href="/stylesheets/normalize.css" rel="stylesheet" type="text/css" /><link href="/stylesheets/all.css" rel="stylesheet" type="text/css" /><link href="/stylesheets/syntax.css" rel="stylesheet" type="text/css" />
    <link href='http://fonts.googleapis.com/css?family=Questrial|Cousine:400,700|Open Sans:400,300,700' rel='stylesheet' type='text/css'>
  </head>
  <body>
    
    <div id="main" role="main">
      <header>
        <a href="/"><h1>[]</h1></a>

      </header>   
      <div class="container">
        <div class="content">
            <article>
    <header><h1>Advanced Android Animation in Scala</h1></header>
    <section>
      <div class="android-frame">
  <div class="android-screen">
    <div class="image-container">
      <img src="/images/animation.gif" class="android-gif" />
    </div>
  </div>
  <div class="android-home-button"></div>
</div>

<p>On mobile, it&rsquo;s really important for animations to feel tactile and physical. When doing complex animations, it&rsquo;s common to chain together animations, or even interleave animations with other operations, like changing text. Neither Android nor iOS handle multi-stage animations gracefully. We are going to build a new animation approach that is cleaner and more powerful.</p>

<p>My belief is that with a more concise animation system, you will be encouraged to use animations more, whereas with verbose and clunky animation systems, you will be tempted to skimp on animations.</p>

<h2>What we are building</h2>
<pre class="highlight scala"><code><span class="n">async</span> <span class="o">{</span>
  <span class="n">await</span><span class="o">(</span><span class="n">refreshButton</span><span class="o">.</span><span class="n">animateAlpha</span><span class="o">(</span><span class="mf">0.5f</span><span class="o">,</span> <span class="mi">500</span> <span class="n">millis</span><span class="o">))</span>
  <span class="n">onUiThread</span> <span class="o">{</span> <span class="n">refreshButton</span><span class="o">.</span><span class="n">setEnabled</span><span class="o">(</span><span class="kc">false</span><span class="o">)</span> <span class="o">}</span>

  <span class="k">val</span> <span class="n">fakeHttpRequest</span> <span class="k">=</span> <span class="n">getBalance</span><span class="o">()</span>

  <span class="n">await</span><span class="o">(</span><span class="n">progress</span><span class="o">.</span><span class="n">animateAlpha</span><span class="o">(</span><span class="mf">1f</span><span class="o">,</span> <span class="mi">500</span> <span class="n">millis</span><span class="o">))</span>

  <span class="c1">// asynchronously wait for the new balance from the server
</span>  <span class="k">val</span> <span class="n">newBalance</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="n">await</span><span class="o">(</span><span class="n">fakeHttpRequest</span><span class="o">)</span>

  <span class="n">await</span><span class="o">(</span><span class="n">accountBalance</span><span class="o">.</span><span class="n">animateScale</span><span class="o">(</span><span class="mf">0.8f</span><span class="o">,</span> <span class="mf">0.8f</span><span class="o">,</span> <span class="mi">300</span> <span class="n">millis</span><span class="o">))</span>

  <span class="c1">// animate the dollar amount
</span>  <span class="k">val</span> <span class="n">numberAnimation</span> <span class="k">=</span> <span class="nc">ViewHelper</span><span class="o">.</span><span class="n">valueAnimator</span><span class="o">(</span>
    <span class="n">startBalance</span><span class="o">,</span>
    <span class="n">newBalance</span><span class="o">,</span> <span class="c1">// the new balance from the server
</span>    <span class="mf">1.5</span> <span class="n">seconds</span><span class="o">,</span>
    <span class="k">new</span> <span class="nc">DecelerateInterpolator</span><span class="o">(</span><span class="mi">1</span><span class="o">),</span>
    <span class="k">new</span> <span class="nc">IntEvaluator</span><span class="o">()</span>
  <span class="o">)</span> <span class="o">{</span>
    <span class="n">v</span> <span class="k">=&gt;</span> <span class="n">accountBalance</span><span class="o">.</span><span class="n">setText</span><span class="o">(</span><span class="s">"$"</span> <span class="o">+</span> <span class="n">v</span><span class="o">.</span><span class="n">toString</span><span class="o">)</span>
  <span class="o">}</span>

  <span class="n">await</span><span class="o">(</span><span class="n">numberAnimation</span><span class="o">)</span>
  <span class="n">await</span><span class="o">(</span><span class="n">accountBalance</span><span class="o">.</span><span class="n">animateScale</span><span class="o">(</span><span class="mf">1f</span><span class="o">,</span> <span class="mf">1f</span><span class="o">,</span> <span class="mi">500</span> <span class="n">millis</span><span class="o">,</span> <span class="k">new</span> <span class="nc">OvershootInterpolator</span><span class="o">(</span><span class="mf">3f</span><span class="o">)))</span>
  <span class="n">await</span><span class="o">(</span><span class="n">progress</span><span class="o">.</span><span class="n">animateAlpha</span><span class="o">(</span><span class="mf">0f</span><span class="o">,</span> <span class="mi">500</span> <span class="n">millis</span><span class="o">))</span>
  <span class="n">await</span><span class="o">(</span><span class="n">refreshButton</span><span class="o">.</span><span class="n">animateAlpha</span><span class="o">(</span><span class="mf">1f</span><span class="o">,</span> <span class="mi">500</span> <span class="n">millis</span><span class="o">))</span>

  <span class="n">onUiThread</span> <span class="o">{</span> <span class="n">refreshButton</span><span class="o">.</span><span class="n">setEnabled</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">}</span>
<span class="o">}</span>
</code></pre>

<p>This probably looks like no Android code that you&rsquo;ve seen before. It&rsquo;s a combination of Scala&rsquo;s <code>Futures</code> and animatior helpers that we will write, which lets us chain the animations in a straightforward and linear way.</p>

<p>The refresh animation is deceptively simple: it&rsquo;s actually built from 8 animations along with an HTTP request and other UI changes. This is incredibly compact.</p>

<h2>Why do I do this?</h2>

<p>Android has a zillion animation APIs but they all feel like they are lacking something.</p>

<ul>
<li><p>View Animation and <code>ViewPropertyAnimator</code>: Can only animate certain properties. Cannot animate text color, drawable properties like background color, or <code>LayoutParams</code>.</p></li>
<li><p>Property Animation: <code>ValueAnimator</code> and <code>ObjectAnimator</code> are powerful, can animate arbitary objects unlike iOS. Low-level, verbose, and annoying to compose. Specifying both the start value and end value gets tiring really quickly.</p></li>
<li><p><code>AnimationSet</code>: Can compose multiple animations into a chain, but cannot compose animations with non-animations, like changing views or other asynchronous operations.</p></li>
<li><p>XML-based animations: Inflexible due to hard-coded magic numbers.</p></li>
</ul>

<p>The biggest problem with all these animation approaches is their <strong>composability</strong>. It&rsquo;s awkward to chain animations with other animations or with things that are not animations.</p>

<h3>Composability, composability, composability</h3>

<p>When you are only chaining two animations, traditional Android animation works pretty well. For example, here is <code>ViewPropertyAnimator</code> in Java:</p>
<pre class="highlight java"><code><span class="n">textView</span><span class="o">.</span><span class="na">animate</span><span class="o">().</span><span class="na">alpha</span><span class="o">(</span><span class="mi">0</span><span class="n">f</span><span class="o">).</span><span class="na">setDuration</span><span class="o">(</span><span class="mi">500</span><span class="o">).</span><span class="na">withEndAction</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
  <span class="nd">@Override</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="n">run</span><span class="o">()</span> <span class="o">{</span>
    <span class="n">textView</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="s">"REFRESHED TEXT"</span><span class="o">);</span>
    <span class="n">textView</span><span class="o">.</span><span class="na">animate</span><span class="o">().</span><span class="na">alpha</span><span class="o">(</span><span class="mi">1</span><span class="n">f</span><span class="o">).</span><span class="na">setDuration</span><span class="o">(</span><span class="mi">500</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">});</span>
</code></pre>

<p>Looks fine. So far. But if we try to add on a couple more animations, you encounter callback hell:</p>
<pre class="highlight java"><code><span class="n">textView</span><span class="o">.</span><span class="na">animate</span><span class="o">().</span><span class="na">alpha</span><span class="o">(</span><span class="mi">0</span><span class="n">f</span><span class="o">).</span><span class="na">setDuration</span><span class="o">(</span><span class="mi">500</span><span class="o">).</span><span class="na">withEndAction</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
  <span class="nd">@Override</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="n">run</span><span class="o">()</span> <span class="o">{</span>
    <span class="n">textView</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="s">"REFRESHED TEXT"</span><span class="o">);</span>

    <span class="n">textView</span><span class="o">.</span><span class="na">animate</span><span class="o">().</span><span class="na">alpha</span><span class="o">(</span><span class="mi">1</span><span class="n">f</span><span class="o">).</span><span class="na">setDuration</span><span class="o">(</span><span class="mi">500</span><span class="o">).</span><span class="na">withEndAction</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
      <span class="nd">@Override</span>
      <span class="kd">public</span> <span class="kt">void</span> <span class="n">run</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">textView</span><span class="o">.</span><span class="na">animate</span><span class="o">().</span><span class="na">scaleX</span><span class="o">(</span><span class="mf">1.03f</span><span class="o">).</span><span class="na">scaleY</span><span class="o">(</span><span class="mf">1.03f</span><span class="o">).</span><span class="na">setDuration</span><span class="o">(</span><span class="mi">300</span><span class="o">).</span><span class="na">withEndAction</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
          <span class="nd">@Override</span>
          <span class="kd">public</span> <span class="kt">void</span> <span class="n">run</span><span class="o">()</span> <span class="o">{</span>
            <span class="n">textView</span><span class="o">.</span><span class="na">animate</span><span class="o">().</span><span class="na">scaleX</span><span class="o">(</span><span class="mi">1</span><span class="n">f</span><span class="o">).</span><span class="na">scaleY</span><span class="o">(</span><span class="mi">1</span><span class="n">f</span><span class="o">).</span><span class="na">setDuration</span><span class="o">(</span><span class="mi">500</span><span class="o">);</span>
          <span class="o">}</span>
        <span class="o">});</span>
      <span class="o">}</span>
    <span class="o">});</span>
  <span class="o">}</span>
<span class="o">});</span>
</code></pre>

<p>If you keep going like this, you are going to hit editor-window overflow. </p>

<p><code>ValueAnimator</code>/<code>ObjectAnimator</code> have similar issues with nesting.</p>

<p>To make things even more complicated, what if you wanted to compose your refresh animation with an HTTP request? If we wanted to do something like (1) fade out, (2) run HTTP request to retrieve the new resource, and (3) fade in with new text, then it would be a total mess of callbacks.</p>

<p>Let&rsquo;s make our own animation helper that is composable. The goal:</p>

<ul>
<li>Chain animations in sequence</li>
<li>Run animations in parallel</li>
<li>Avoid needing to specify start values</li>
<li>Animate anything</li>
<li>Concise syntax</li>
<li>Animations can be composed with non-animations and with asynchronous operations like HTTP requests</li>
<li>No nesting in multi-stage animations</li>
</ul>

<h2>Animation with Futures</h2>

<p>My previous article about <a href="http://emptybrackets.com/2015/06/24/scala-takes-over-android.html">Scala on Android</a> introduced Scala&rsquo;s <code>Future</code> abstraction for dealing with asynchronous operations. When doing animations, I reached for <code>Futures</code> because they are asynchronous. If your animations are in <code>Futures</code>, and your HTTP requests are also in <code>Futures</code>, then you can compose animations and HTTP requests! I got this idea from trying to comprehend the <a href="http://macroid.github.io/">Macroid</a> Scala Android framework.</p>

<p>We are going to make some animation helpers by <strong>wrapping <code>ValueAnimators</code> inside <code>Futures</code></strong>. To make things even more succint, we are going to patch our animation methods onto <code>Views</code>.</p>

<h3>Example: Fade out a button, then disable it</h3>
<pre class="highlight scala"><code><span class="n">button</span><span class="o">.</span><span class="n">animateAlpha</span><span class="o">(</span><span class="mf">0f</span><span class="o">,</span> <span class="mi">500</span> <span class="n">millis</span><span class="o">)</span> <span class="n">onSuccess</span><span class="o">(</span><span class="k">case</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="n">button</span><span class="o">.</span><span class="n">setEnabled</span><span class="o">(</span><span class="kc">false</span><span class="o">))</span>
</code></pre>

<h2>The Implementation</h2>

<p>We will give <code>Views</code> our animation helper methods by using Scala&rsquo;s implicit wrapper class construct:</p>
<pre class="highlight scala"><code><span class="k">object</span> <span class="nc">ViewHelper</span> <span class="o">{</span>
  <span class="k">implicit</span> <span class="k">class</span> <span class="nc">AnimatedView</span><span class="o">(</span><span class="n">v</span><span class="k">:</span> <span class="kt">View</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">def</span> <span class="n">animateAlpha</span><span class="o">(</span><span class="n">alpha</span><span class="k">:</span> <span class="kt">Float</span><span class="o">,</span> <span class="n">duration</span><span class="k">:</span> <span class="kt">FiniteDuration</span><span class="o">)</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">Unit</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
      <span class="c1">//...
</span>    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>

<span class="c1">// in Activity, import the wrapper conversion into scope
</span><span class="k">import</span> <span class="nn">com.emptyarray.scala.android.util.ViewHelper._</span>

<span class="c1">// all `Views` are now implicitly wrapped in AnimatedViews,
// and now have `animateAlpha`
</span><span class="n">view</span><span class="o">.</span><span class="n">animateAlpha</span><span class="o">(</span><span class="mf">0f</span><span class="o">,</span> <span class="mi">500</span> <span class="n">millis</span><span class="o">)</span>

</code></pre>

<h3>ValueAnimator, first try</h3>

<p><code>ValueAnimators</code> are very powerful and general, but they have a lot of boilerplate. Let&rsquo;s make a helper that gives us a <code>ValueAnimator</code> in one shot, runs a closure from an <code>AnimatorUpdateListener</code> and returns a <code>Future</code> that completes when the animation is done.</p>
<pre class="highlight scala"><code><span class="k">object</span> <span class="nc">ViewHelper</span> <span class="k">extends</span> <span class="nc">UiThreadHelper</span> <span class="o">{</span>
  <span class="k">def</span> <span class="n">valueAnimator</span><span class="o">(</span><span class="n">start</span><span class="k">:</span> <span class="kt">Float</span><span class="o">,</span> 
                    <span class="n">stop</span><span class="k">:</span> <span class="kt">Float</span><span class="o">,</span> 
                    <span class="n">duration</span><span class="k">:</span> <span class="kt">FiniteDuration</span><span class="o">)(</span><span class="n">f</span><span class="k">:</span> <span class="kt">Float</span> <span class="o">=&gt;</span> <span class="nc">Unit</span><span class="o">)</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">Unit</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>

    <span class="k">val</span> <span class="n">animator</span> <span class="k">=</span> <span class="nc">ValueAnimator</span><span class="o">.</span><span class="n">ofFloat</span><span class="o">(</span><span class="n">start</span><span class="o">,</span> <span class="n">stop</span><span class="o">)</span>

    <span class="n">animator</span><span class="o">.</span><span class="n">setDuration</span><span class="o">(</span><span class="n">duration</span><span class="o">.</span><span class="n">toMillis</span><span class="o">)</span>

    <span class="n">animator</span><span class="o">.</span><span class="n">addUpdateListener</span><span class="o">(</span><span class="k">new</span> <span class="nc">AnimatorUpdateListener</span> <span class="o">{</span>
      <span class="k">override</span> <span class="k">def</span> <span class="n">onAnimationUpdate</span><span class="o">(</span><span class="n">animator</span><span class="k">:</span> <span class="kt">ValueAnimator</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
        <span class="n">f</span><span class="o">(</span><span class="n">animator</span><span class="o">.</span><span class="n">getAnimatedValue</span><span class="o">.</span><span class="n">asInstanceOf</span><span class="o">[</span><span class="kt">Float</span><span class="o">])</span>
      <span class="o">}</span>
    <span class="o">})</span>

    <span class="n">runAnimator</span><span class="o">(</span><span class="n">animator</span><span class="o">)</span> <span class="c1">// we will write this soon
</span>  <span class="o">}</span>
<span class="o">}</span>
</code></pre>

<p>Things to notice:</p>

<ul>
<li><code>FiniteDuration</code> is Scala&rsquo;s time duration class which let&rsquo;s you write stuff like <code>1.5 seconds</code> instead of only using milliseconds as a <code>Long</code></li>
<li>You might notice that there are two parameter sets in parentheses! That&rsquo;s because it&rsquo;s a curried function. This is nicer for syntax.</li>
<li><code>f: Float =&gt; Unit</code> means a function from a <code>Float</code> to <code>Unit</code>. <code>Unit</code> is Scala&rsquo;s <code>void</code>. This function will run for every update of the animation, and we will access the <code>Float</code> as the animated value.</li>
<li>Returns a <code>Future</code></li>
</ul>

<p>But this version is too simplistic. What if we want to animate an <code>Int</code> instead of a <code>Float</code>? What if we want to use a different <code>Interpolator</code> or <code>Evaluator</code>?</p>

<h3>ValueAnimator, second try</h3>
<pre class="highlight scala"><code><span class="k">object</span> <span class="nc">ViewHelper</span> <span class="k">extends</span> <span class="nc">UiThreadHelper</span> <span class="o">{</span>
  <span class="k">def</span> <span class="n">valueAnimator</span><span class="o">[</span><span class="kt">A</span>, <span class="kt">T</span><span class="o">](</span><span class="n">start</span><span class="k">:</span> <span class="kt">A</span><span class="o">,</span> <span class="n">stop</span><span class="k">:</span> <span class="kt">A</span><span class="o">,</span> <span class="n">duration</span><span class="k">:</span> <span class="kt">FiniteDuration</span><span class="o">,</span>
                       <span class="n">interpolator</span><span class="k">:</span> <span class="kt">TimeInterpolator</span><span class="o">,</span>
                       <span class="n">evaluator</span><span class="k">:</span> <span class="kt">TypeEvaluator</span><span class="o">[</span><span class="kt">T</span><span class="o">])</span>
                      <span class="o">(</span><span class="n">f</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&gt;</span> <span class="nc">Unit</span><span class="o">)</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">Unit</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>

    <span class="c1">// pattern match handles the casting                  
</span>    <span class="k">val</span> <span class="n">animator</span> <span class="k">=</span> <span class="o">(</span><span class="n">start</span><span class="o">,</span> <span class="n">stop</span><span class="o">)</span> <span class="k">match</span> <span class="o">{</span>
      <span class="k">case</span> <span class="o">(</span><span class="n">s</span><span class="k">:</span> <span class="kt">Float</span><span class="o">,</span> <span class="n">e</span><span class="k">:</span> <span class="kt">Float</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="nc">ValueAnimator</span><span class="o">.</span><span class="n">ofFloat</span><span class="o">(</span><span class="n">s</span><span class="o">,</span> <span class="n">e</span><span class="o">)</span>
      <span class="k">case</span> <span class="o">(</span><span class="n">s</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">e</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="nc">ValueAnimator</span><span class="o">.</span><span class="n">ofInt</span><span class="o">(</span><span class="n">s</span><span class="o">,</span> <span class="n">e</span><span class="o">)</span>
    <span class="o">}</span>

    <span class="n">animator</span><span class="o">.</span><span class="n">setDuration</span><span class="o">(</span><span class="n">duration</span><span class="o">.</span><span class="n">toMillis</span><span class="o">)</span>
    <span class="n">animator</span><span class="o">.</span><span class="n">setInterpolator</span><span class="o">(</span><span class="n">interpolator</span><span class="o">)</span>
    <span class="n">animator</span><span class="o">.</span><span class="n">setEvaluator</span><span class="o">(</span><span class="n">evaluator</span><span class="o">)</span>

    <span class="n">animator</span><span class="o">.</span><span class="n">addUpdateListener</span><span class="o">(</span><span class="k">new</span> <span class="nc">AnimatorUpdateListener</span> <span class="o">{</span>
      <span class="k">override</span> <span class="k">def</span> <span class="n">onAnimationUpdate</span><span class="o">(</span><span class="n">animator</span><span class="k">:</span> <span class="kt">ValueAnimator</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
        <span class="n">f</span><span class="o">(</span><span class="n">animator</span><span class="o">.</span><span class="n">getAnimatedValue</span><span class="o">.</span><span class="n">asInstanceOf</span><span class="o">[</span><span class="kt">A</span><span class="o">])</span>
      <span class="o">}</span>
    <span class="o">})</span>

    <span class="n">runAnimator</span><span class="o">(</span><span class="n">animator</span><span class="o">)</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre>

<p>Now <code>valueAnimator</code> is more generic thanks to the type parameters: one for the type of the <code>ValueAnimator</code>, and the other for the type of the <code>Evaluator</code>.</p>

<p>Next we will actually run the <code>ValueAnimator</code> inside a <code>Future</code>.</p>

<h3>ValueAnimator in a Future</h3>
<pre class="highlight scala"><code><span class="k">object</span> <span class="nc">ViewHelper</span> <span class="o">{</span>
  <span class="k">def</span> <span class="n">runAnimator</span><span class="o">(</span><span class="n">animator</span><span class="k">:</span> <span class="kt">Animator</span><span class="o">)</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">Unit</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
    <span class="k">val</span> <span class="n">p</span> <span class="k">=</span> <span class="nc">Promise</span><span class="o">[</span><span class="kt">Unit</span><span class="o">]()</span>

    <span class="n">animator</span><span class="o">.</span><span class="n">addListener</span><span class="o">(</span><span class="k">new</span> <span class="nc">AnimatorListenerAdapter</span> <span class="o">{</span>
      <span class="k">override</span> <span class="k">def</span> <span class="n">onAnimationEnd</span><span class="o">(</span><span class="n">animator</span><span class="k">:</span> <span class="kt">Animator</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">success</span><span class="o">(())</span>
      <span class="k">override</span> <span class="k">def</span> <span class="n">onAnimationCancel</span><span class="o">(</span><span class="n">animtor</span><span class="k">:</span> <span class="kt">Animator</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">success</span><span class="o">(())</span>
    <span class="o">})</span>

    <span class="n">onUiThread</span><span class="o">(</span><span class="n">animator</span><span class="o">.</span><span class="n">start</span><span class="o">())</span>

    <span class="n">p</span><span class="o">.</span><span class="n">future</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre>

<p>We start a <code>Promise</code>, and run the animator (on the UI thread), completing the promise when the animation is ended or canceled. We return the <code>Promise&#39;s</code> <code>Future</code>, which can be observed by consumers. There is no way to cancel an animation right now, but this approach could be extended to add one.</p>

<p>With our helpers, we can now <em>animate any function we want</em>. Well, any function that takes a <code>Float</code> and returns nothing.</p>

<h3>animateAlpha, the whole story</h3>
<pre class="highlight scala"><code><span class="k">implicit</span> <span class="k">class</span> <span class="nc">AnimatedView</span><span class="o">(</span><span class="n">v</span><span class="k">:</span> <span class="kt">View</span><span class="o">)</span> <span class="o">{</span>

  <span class="k">def</span> <span class="n">animateAlpha</span><span class="o">(</span><span class="n">alpha</span><span class="k">:</span> <span class="kt">Float</span><span class="o">,</span> <span class="n">duration</span><span class="k">:</span> <span class="kt">FiniteDuration</span><span class="o">)</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">Unit</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>

    <span class="n">getFromUiThread</span><span class="o">(</span><span class="n">v</span><span class="o">.</span><span class="n">getAlpha</span><span class="o">).</span><span class="n">flatMap</span> <span class="o">{</span>
      <span class="n">startAlpha</span> <span class="k">=&gt;</span>

        <span class="nc">ViewHelper</span><span class="o">.</span><span class="n">valueAnimator</span><span class="o">(</span><span class="n">startAlpha</span><span class="o">,</span> <span class="n">alpha</span><span class="o">,</span> <span class="n">duration</span><span class="o">,</span>
          <span class="k">new</span> <span class="nc">AccelerateDecelerateInterpolator</span><span class="o">(),</span> <span class="k">new</span> <span class="nc">FloatEvaluator</span><span class="o">())(</span><span class="n">v</span><span class="o">.</span><span class="n">setAlpha</span><span class="o">)</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre>

<p>OK, I admit that this is starting to get a little complicated. But I&rsquo;ll explain what&rsquo;s going on here:</p>

<ul>
<li>The key part is that we are now using <code>valueAnimator</code> to animate a function</li>
<li>The function we are animating is <code>setAlpha</code> on the <code>View</code> that wrapped in our implicit class. <code>v.setAlpha</code> is a short-hand for a function invocation like <code>{ x =&gt; v.setAlpha(x) }</code>, where <code>x</code> is passed from our <code>ValueAnimator&#39;s</code> <code>getAnimatedValue</code></li>
<li>I don&rsquo;t want to want to have to specify the start alpha: it should be the <code>View&#39;s</code> current alpha. The problem is that I&rsquo;m being a bit mean to myself and I&rsquo;m not willing to assume that I&rsquo;m on the UI thread.</li>
<li>To get the <code>View&#39;s</code> initial alpha, I run <code>getAlpha</code> in a <code>Future</code> that runs on the UI thread. That&rsquo;s what <code>getFromUiThread</code> does, and you can see the implementation <a href="https://github.com/emptyarray/scala-android-animation/blob/master/src/main/scala/com/emptyarray/scala/android/util/UiThreadExecutionContext.scala">on Github</a>.</li>
<li>What is <code>flatMap</code>? That&rsquo;s the question that all beginning Scala developers ask. <code>flatMap</code> is an idea from functional programming. In the context of a <code>Future</code>, what you need to know is that <em><code>flatMap</code> lets you chain <code>Futures</code> together</em>.</li>
</ul>

<p>The payoff for this complexity is that we can have animations without a start value, and we can start them from any thread. This will make our code much cleaner in other places.</p>

<h3>Animating Numbers</h3>

<p>Since we can animate functions, we can animate the numbers with the <code>valueAnimator</code> helper also:</p>
<pre class="highlight scala"><code><span class="nc">ViewHelper</span><span class="o">.</span><span class="n">valueAnimator</span><span class="o">(</span>
  <span class="n">startBalance</span><span class="o">,</span>
  <span class="n">newBalance</span><span class="o">,</span>
  <span class="mf">1.5</span> <span class="n">seconds</span><span class="o">,</span>
  <span class="k">new</span> <span class="nc">DecelerateInterpolator</span><span class="o">(</span><span class="mi">1</span><span class="o">),</span>
  <span class="k">new</span> <span class="nc">IntEvaluator</span><span class="o">()</span>
<span class="o">)</span> <span class="o">{</span>
  <span class="n">v</span> <span class="k">=&gt;</span> <span class="n">accountBalance</span><span class="o">.</span><span class="n">setText</span><span class="o">(</span><span class="s">"$"</span> <span class="o">+</span> <span class="n">v</span><span class="o">.</span><span class="n">toString</span><span class="o">)</span>
<span class="o">}</span>
</code></pre>

<p><code>v =&gt; accountBalance.setText(&quot;$&quot; + v.toString)</code> is the animation function that we are passing in. This returns a <code>Future</code> that we can chain with other animations.</p>

<h3>So how do you chain animations?</h3>

<p>Normally in Scala, you would chain <code>Futures</code> like using <code>for</code> comprehensions:</p>
<pre class="highlight scala"><code><span class="c1">// fade a view in, then out, then make it gone
</span><span class="k">for</span> <span class="o">{</span>
  <span class="n">a</span> <span class="k">&lt;-</span> <span class="n">progress</span><span class="o">.</span><span class="n">animateAlpha</span><span class="o">(</span><span class="mf">1f</span><span class="o">,</span> <span class="mi">500</span> <span class="n">millis</span><span class="o">)</span>
  <span class="n">b</span> <span class="k">&lt;-</span> <span class="n">progress</span><span class="o">.</span><span class="n">animateAlpha</span><span class="o">(</span><span class="mf">0f</span><span class="o">,</span> <span class="mi">500</span> <span class="n">millis</span><span class="o">)</span>
<span class="o">}</span> <span class="k">yield</span> <span class="n">onUiThread</span> <span class="o">{</span> <span class="n">progress</span><span class="o">.</span><span class="n">setVisibility</span><span class="o">(</span><span class="nc">View</span><span class="o">.</span><span class="nc">GONE</span><span class="o">)</span> <span class="o">}</span>
</code></pre>

<p>This syntax isn&rsquo;t nested, but it is a little awkard. <code>for</code> comprehensions require extracting the value of the <code>Future</code> into the variables on the left, but we don&rsquo;t need that because our animation helpers return <code>Unit</code> (<code>void</code>).</p>

<p>Luckily, <a href="https://github.com/scala/async">scala-async</a> supplies macros that let us wait for <code>Futures</code> to complete without blocking:</p>
<pre class="highlight scala"><code><span class="k">import</span> <span class="nn">scala.async.Async.</span><span class="o">{</span><span class="n">async</span><span class="o">,</span> <span class="n">await</span><span class="o">}</span>

<span class="n">async</span> <span class="o">{</span>
  <span class="n">await</span><span class="o">(</span><span class="n">progress</span><span class="o">.</span><span class="n">animateAlpha</span><span class="o">(</span><span class="mf">1f</span><span class="o">,</span> <span class="mi">500</span> <span class="n">millis</span><span class="o">))</span>
  <span class="n">await</span><span class="o">(</span><span class="n">progress</span><span class="o">.</span><span class="n">animateAlpha</span><span class="o">(</span><span class="mf">0f</span><span class="o">,</span> <span class="mi">500</span> <span class="n">millis</span><span class="o">))</span>
  <span class="n">onUiThread</span> <span class="o">{</span> <span class="n">progress</span><span class="o">.</span><span class="n">setVisibility</span><span class="o">(</span><span class="nc">View</span><span class="o">.</span><span class="nc">GONE</span><span class="o">)</span> <span class="o">}</span>
<span class="o">}</span>
</code></pre>

<p>Much more intuitive. And note the ease of composing <code>Futures</code> with other operations, like changing the UI.</p>

<h2>The full animation</h2>

<div class="android-frame">
  <div class="android-screen">
    <div class="image-container">
      <img src="/images/animation.gif" class="android-gif" />
    </div>
  </div>
  <div class="android-home-button"></div>
</div>

<p>Now that chaining animations is easy, let&rsquo;s go to town and write a really complex refresh animation, interleaved with an HTTP request and with enabling/disabling the refresh button. Imagine how much more code this would take in a normal Java Android approach!</p>
<pre class="highlight scala"><code><span class="n">async</span> <span class="o">{</span>
  <span class="n">await</span><span class="o">(</span><span class="n">refreshButton</span><span class="o">.</span><span class="n">animateAlpha</span><span class="o">(</span><span class="mf">0.5f</span><span class="o">,</span> <span class="mi">500</span> <span class="n">millis</span><span class="o">))</span>
  <span class="n">onUiThread</span> <span class="o">{</span> <span class="n">refreshButton</span><span class="o">.</span><span class="n">setEnabled</span><span class="o">(</span><span class="kc">false</span><span class="o">)</span> <span class="o">}</span>

  <span class="k">val</span> <span class="n">fakeHttpRequest</span> <span class="k">=</span> <span class="n">getBalance</span><span class="o">()</span>

  <span class="n">await</span><span class="o">(</span><span class="n">progress</span><span class="o">.</span><span class="n">animateAlpha</span><span class="o">(</span><span class="mf">1f</span><span class="o">,</span> <span class="mi">500</span> <span class="n">millis</span><span class="o">))</span>

  <span class="c1">// asynchronously wait for the new balance from the server
</span>  <span class="k">val</span> <span class="n">newBalance</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="n">await</span><span class="o">(</span><span class="n">fakeHttpRequest</span><span class="o">)</span>

  <span class="n">await</span><span class="o">(</span><span class="n">accountBalance</span><span class="o">.</span><span class="n">animateScale</span><span class="o">(</span><span class="mf">0.8f</span><span class="o">,</span> <span class="mf">0.8f</span><span class="o">,</span> <span class="mi">300</span> <span class="n">millis</span><span class="o">))</span>

  <span class="k">val</span> <span class="n">numberAnimation</span> <span class="k">=</span> <span class="nc">ViewHelper</span><span class="o">.</span><span class="n">valueAnimator</span><span class="o">(</span>
    <span class="n">startBalance</span><span class="o">,</span>
    <span class="n">newBalance</span><span class="o">,</span>
    <span class="mf">1.5</span> <span class="n">seconds</span><span class="o">,</span>
    <span class="k">new</span> <span class="nc">DecelerateInterpolator</span><span class="o">(</span><span class="mi">1</span><span class="o">),</span>
    <span class="k">new</span> <span class="nc">IntEvaluator</span><span class="o">()</span>
  <span class="o">)</span> <span class="o">{</span>
    <span class="n">v</span> <span class="k">=&gt;</span> <span class="n">accountBalance</span><span class="o">.</span><span class="n">setText</span><span class="o">(</span><span class="s">"$"</span> <span class="o">+</span> <span class="n">v</span><span class="o">.</span><span class="n">toString</span><span class="o">)</span>
  <span class="o">}</span>

  <span class="n">await</span><span class="o">(</span><span class="n">numberAnimation</span><span class="o">)</span>
  <span class="n">await</span><span class="o">(</span><span class="n">accountBalance</span><span class="o">.</span><span class="n">animateScale</span><span class="o">(</span><span class="mf">1f</span><span class="o">,</span> <span class="mf">1f</span><span class="o">,</span> <span class="mi">500</span> <span class="n">millis</span><span class="o">,</span> <span class="k">new</span> <span class="nc">OvershootInterpolator</span><span class="o">(</span><span class="mf">3f</span><span class="o">)))</span>
  <span class="n">await</span><span class="o">(</span><span class="n">progress</span><span class="o">.</span><span class="n">animateAlpha</span><span class="o">(</span><span class="mf">0f</span><span class="o">,</span> <span class="mi">500</span> <span class="n">millis</span><span class="o">))</span>
  <span class="n">await</span><span class="o">(</span><span class="n">refreshButton</span><span class="o">.</span><span class="n">animateAlpha</span><span class="o">(</span><span class="mf">1f</span><span class="o">,</span> <span class="mi">500</span> <span class="n">millis</span><span class="o">))</span>

  <span class="n">onUiThread</span> <span class="o">{</span> <span class="n">refreshButton</span><span class="o">.</span><span class="n">setEnabled</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">}</span>
<span class="o">}</span>
</code></pre>

<p>We need <code>onUiThread</code> because the <code>async</code> block is running in the thread pool, not on the main thread. See my <a href="//rbs-macbook-pro.local:4567/2015/06/24/scala-takes-over-android.html">previous article</a> for more explanation about threading. Find this whole project on Github with the full implementation:</p>

<p><span class="github">
  <span class="icon-github large-github-icon"></span><a href="https://github.com/emptyarray/scala-android-animation">Project On Github</a>
</span></p>

    </section>
  </article>


          <aside class="sidebar-container">
            <div class="sidebar">
              <h2>About</h2>

              <p class="about-text">Full-stack web + mobile developer all rolled into one. Mountain View.</p>

              <div class="find-me-links">

                <a class="find-me-row" href="https://www.linkedin.com/pub/richard-barton/7/713/899">
                  <span class="icon-linkedin"></span>
                  <span>LinkedIn</span>
                </a>
                <a class="find-me-row" href="https://github.com/emptyarray">
                  <span class="icon-github"></span>
                  <span>Github</span>
                </a>
              </div>

              <h3>Recent Articles</h3>
              <ol>
                  <li><a href="/2017/03/31/image-animation-with-procedural-textures">Image Animation With Procedural Textures</a> <span class="article-date">Mar 31 2017</span></li>
                  <li><a href="/2015/07/11/advanced-android-animation-in-scala">Advanced Android Animation in Scala</a> <span class="article-date">Jul 11 2015</span></li>
                  <li><a href="/2015/06/24/scala-takes-over-android">Scala Takes Over Android</a> <span class="article-date">Jun 24 2015</span></li>
              </ol>
            </div>
        
          </aside>
        </div>
        
      </div>

      
    </div>
    
    <script src="https://unpkg.com/react@15/dist/react.min.js"></script>
    <script src="https://unpkg.com/react-dom@15/dist/react-dom.min.js"></script>
    <script src="/javascripts/bundle.js"></script>
  </body>
</html>
